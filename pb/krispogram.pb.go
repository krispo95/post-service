// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/krispogram.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Post struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId uint64 `protobuf:"varint,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Topic    string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Body     string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7462b994fe3898d, []int{0}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetAuthorId() uint64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *Post) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Post) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type NewPost struct {
	AuthorId uint64 `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Body     string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *NewPost) Reset()         { *m = NewPost{} }
func (m *NewPost) String() string { return proto.CompactTextString(m) }
func (*NewPost) ProtoMessage()    {}
func (*NewPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7462b994fe3898d, []int{1}
}
func (m *NewPost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewPost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPost.Merge(m, src)
}
func (m *NewPost) XXX_Size() int {
	return m.Size()
}
func (m *NewPost) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPost.DiscardUnknown(m)
}

var xxx_messageInfo_NewPost proto.InternalMessageInfo

func (m *NewPost) GetAuthorId() uint64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *NewPost) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *NewPost) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type GetPostByIdReq struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPostByIdReq) Reset()         { *m = GetPostByIdReq{} }
func (m *GetPostByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetPostByIdReq) ProtoMessage()    {}
func (*GetPostByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7462b994fe3898d, []int{2}
}
func (m *GetPostByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPostByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPostByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPostByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPostByIdReq.Merge(m, src)
}
func (m *GetPostByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPostByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPostByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPostByIdReq proto.InternalMessageInfo

func (m *GetPostByIdReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPostsByAuthorIdReq struct {
	AuthorId uint64 `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
}

func (m *GetPostsByAuthorIdReq) Reset()         { *m = GetPostsByAuthorIdReq{} }
func (m *GetPostsByAuthorIdReq) String() string { return proto.CompactTextString(m) }
func (*GetPostsByAuthorIdReq) ProtoMessage()    {}
func (*GetPostsByAuthorIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7462b994fe3898d, []int{3}
}
func (m *GetPostsByAuthorIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPostsByAuthorIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPostsByAuthorIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPostsByAuthorIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPostsByAuthorIdReq.Merge(m, src)
}
func (m *GetPostsByAuthorIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPostsByAuthorIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPostsByAuthorIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPostsByAuthorIdReq proto.InternalMessageInfo

func (m *GetPostsByAuthorIdReq) GetAuthorId() uint64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

type GetPostsByAuthorIdResp struct {
	Posts []*Post `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (m *GetPostsByAuthorIdResp) Reset()         { *m = GetPostsByAuthorIdResp{} }
func (m *GetPostsByAuthorIdResp) String() string { return proto.CompactTextString(m) }
func (*GetPostsByAuthorIdResp) ProtoMessage()    {}
func (*GetPostsByAuthorIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7462b994fe3898d, []int{4}
}
func (m *GetPostsByAuthorIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPostsByAuthorIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPostsByAuthorIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPostsByAuthorIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPostsByAuthorIdResp.Merge(m, src)
}
func (m *GetPostsByAuthorIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GetPostsByAuthorIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPostsByAuthorIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPostsByAuthorIdResp proto.InternalMessageInfo

func (m *GetPostsByAuthorIdResp) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func init() {
	proto.RegisterType((*Post)(nil), "pb.Post")
	proto.RegisterType((*NewPost)(nil), "pb.NewPost")
	proto.RegisterType((*GetPostByIdReq)(nil), "pb.GetPostByIdReq")
	proto.RegisterType((*GetPostsByAuthorIdReq)(nil), "pb.GetPostsByAuthorIdReq")
	proto.RegisterType((*GetPostsByAuthorIdResp)(nil), "pb.GetPostsByAuthorIdResp")
}

func init() { proto.RegisterFile("pb/krispogram.proto", fileDescriptor_a7462b994fe3898d) }

var fileDescriptor_a7462b994fe3898d = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x9b, 0xe9, 0xf4, 0xef, 0x16, 0xbb, 0xb8, 0xfe, 0x30, 0x56, 0x89, 0xc3, 0x6c, 0xec,
	0xaa, 0x42, 0x75, 0xe1, 0xd6, 0x0a, 0x96, 0x6e, 0xa4, 0x8c, 0x3b, 0x41, 0xa4, 0x69, 0x82, 0x06,
	0x91, 0xc4, 0x4c, 0x54, 0xfa, 0x16, 0xbe, 0x81, 0xaf, 0xe3, 0xb2, 0x4b, 0x97, 0xd2, 0xbe, 0x88,
	0x24, 0xad, 0xd2, 0x91, 0xd6, 0xdd, 0xdc, 0x33, 0xdf, 0x3d, 0xf7, 0x1c, 0x08, 0x6c, 0x6a, 0x76,
	0xf4, 0x60, 0x64, 0xa6, 0xd5, 0x9d, 0x19, 0x3e, 0xb6, 0xb5, 0x51, 0x56, 0x61, 0xa0, 0x59, 0x72,
	0x03, 0xe1, 0x40, 0x65, 0x16, 0x1b, 0x10, 0x48, 0x1e, 0x91, 0x98, 0xb4, 0xc2, 0x34, 0x90, 0x1c,
	0xf7, 0xa0, 0x36, 0x7c, 0xb6, 0xf7, 0xca, 0xdc, 0x4a, 0x1e, 0x05, 0x5e, 0xae, 0xce, 0x85, 0x3e,
	0xc7, 0x2d, 0x28, 0x59, 0xa5, 0xe5, 0x28, 0x2a, 0xc6, 0xa4, 0x55, 0x4b, 0xe7, 0x03, 0x22, 0x84,
	0x4c, 0xf1, 0x71, 0x14, 0x7a, 0xd1, 0x7f, 0x27, 0x03, 0xa8, 0x5c, 0x8a, 0x57, 0x7f, 0x21, 0xe7,
	0x48, 0xd6, 0x39, 0x06, 0xab, 0x1c, 0x8b, 0x4b, 0x8e, 0x31, 0x34, 0x7a, 0xc2, 0x3a, 0xc7, 0xee,
	0xb8, 0xcf, 0x53, 0xf1, 0xf4, 0x37, 0x7a, 0x72, 0x02, 0xdb, 0x0b, 0x22, 0xeb, 0x8e, 0xcf, 0x16,
	0x17, 0x1c, 0xf8, 0x5f, 0x82, 0xe4, 0x14, 0x76, 0x56, 0x6d, 0x65, 0x1a, 0x29, 0x94, 0xb4, 0x93,
	0x23, 0x12, 0x17, 0x5b, 0xf5, 0x4e, 0xb5, 0xad, 0x59, 0xdb, 0x71, 0xe9, 0x5c, 0xee, 0xbc, 0x13,
	0xa8, 0xbb, 0xf9, 0x4a, 0x98, 0x17, 0x39, 0x12, 0x78, 0x00, 0xe5, 0x73, 0x23, 0x86, 0x56, 0x60,
	0xdd, 0xa1, 0x8b, 0xfe, 0xcd, 0xdf, 0x3d, 0x3c, 0x84, 0x4a, 0x4f, 0xf8, 0xf8, 0x88, 0x4e, 0xcc,
	0xf7, 0x59, 0x02, 0x2f, 0x60, 0xc3, 0x83, 0x3f, 0x71, 0x70, 0x77, 0x09, 0xcf, 0x97, 0x6b, 0x36,
	0xd7, 0xfd, 0xca, 0x74, 0x77, 0xff, 0x63, 0x4a, 0xc9, 0x64, 0x4a, 0xc9, 0xd7, 0x94, 0x92, 0xb7,
	0x19, 0x2d, 0x4c, 0x66, 0xb4, 0xf0, 0x39, 0xa3, 0x85, 0xeb, 0x40, 0x33, 0x56, 0xf6, 0xaf, 0xe1,
	0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x31, 0x18, 0x83, 0x24, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PostServiceClient interface {
	Create(ctx context.Context, in *NewPost, opts ...grpc.CallOption) (*Post, error)
	GetById(ctx context.Context, in *GetPostByIdReq, opts ...grpc.CallOption) (*Post, error)
	GetByAuthorId(ctx context.Context, in *GetPostsByAuthorIdReq, opts ...grpc.CallOption) (*GetPostsByAuthorIdResp, error)
}

type postServiceClient struct {
	cc *grpc.ClientConn
}

func NewPostServiceClient(cc *grpc.ClientConn) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) Create(ctx context.Context, in *NewPost, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/pb.PostService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetById(ctx context.Context, in *GetPostByIdReq, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/pb.PostService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetByAuthorId(ctx context.Context, in *GetPostsByAuthorIdReq, opts ...grpc.CallOption) (*GetPostsByAuthorIdResp, error) {
	out := new(GetPostsByAuthorIdResp)
	err := c.cc.Invoke(ctx, "/pb.PostService/GetByAuthorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
type PostServiceServer interface {
	Create(context.Context, *NewPost) (*Post, error)
	GetById(context.Context, *GetPostByIdReq) (*Post, error)
	GetByAuthorId(context.Context, *GetPostsByAuthorIdReq) (*GetPostsByAuthorIdResp, error)
}

// UnimplementedPostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (*UnimplementedPostServiceServer) Create(ctx context.Context, req *NewPost) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPostServiceServer) GetById(ctx context.Context, req *GetPostByIdReq) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedPostServiceServer) GetByAuthorId(ctx context.Context, req *GetPostsByAuthorIdReq) (*GetPostsByAuthorIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAuthorId not implemented")
}

func RegisterPostServiceServer(s *grpc.Server, srv PostServiceServer) {
	s.RegisterService(&_PostService_serviceDesc, srv)
}

func _PostService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Create(ctx, req.(*NewPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetById(ctx, req.(*GetPostByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsByAuthorIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostService/GetByAuthorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetByAuthorId(ctx, req.(*GetPostsByAuthorIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PostService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PostService_GetById_Handler,
		},
		{
			MethodName: "GetByAuthorId",
			Handler:    _PostService_GetByAuthorId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/krispogram.proto",
}

func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintKrispogram(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintKrispogram(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthorId != 0 {
		i = encodeVarintKrispogram(dAtA, i, uint64(m.AuthorId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintKrispogram(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewPost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewPost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewPost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintKrispogram(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintKrispogram(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuthorId != 0 {
		i = encodeVarintKrispogram(dAtA, i, uint64(m.AuthorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPostByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPostByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPostByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintKrispogram(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPostsByAuthorIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPostsByAuthorIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPostsByAuthorIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorId != 0 {
		i = encodeVarintKrispogram(dAtA, i, uint64(m.AuthorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPostsByAuthorIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPostsByAuthorIdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPostsByAuthorIdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Posts) > 0 {
		for iNdEx := len(m.Posts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Posts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKrispogram(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKrispogram(dAtA []byte, offset int, v uint64) int {
	offset -= sovKrispogram(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKrispogram(uint64(m.Id))
	}
	if m.AuthorId != 0 {
		n += 1 + sovKrispogram(uint64(m.AuthorId))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovKrispogram(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovKrispogram(uint64(l))
	}
	return n
}

func (m *NewPost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorId != 0 {
		n += 1 + sovKrispogram(uint64(m.AuthorId))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovKrispogram(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovKrispogram(uint64(l))
	}
	return n
}

func (m *GetPostByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKrispogram(uint64(m.Id))
	}
	return n
}

func (m *GetPostsByAuthorIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorId != 0 {
		n += 1 + sovKrispogram(uint64(m.AuthorId))
	}
	return n
}

func (m *GetPostsByAuthorIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Posts) > 0 {
		for _, e := range m.Posts {
			l = e.Size()
			n += 1 + l + sovKrispogram(uint64(l))
		}
	}
	return n
}

func sovKrispogram(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKrispogram(x uint64) (n int) {
	return sovKrispogram(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKrispogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKrispogram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKrispogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKrispogram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKrispogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKrispogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewPost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKrispogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewPost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewPost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKrispogram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKrispogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKrispogram
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKrispogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKrispogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPostByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKrispogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPostByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPostByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKrispogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPostsByAuthorIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKrispogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPostsByAuthorIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPostsByAuthorIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKrispogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPostsByAuthorIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKrispogram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPostsByAuthorIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPostsByAuthorIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Posts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKrispogram
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKrispogram
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Posts = append(m.Posts, &Post{})
			if err := m.Posts[len(m.Posts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKrispogram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKrispogram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKrispogram(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKrispogram
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKrispogram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKrispogram
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKrispogram
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKrispogram
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKrispogram        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKrispogram          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKrispogram = fmt.Errorf("proto: unexpected end of group")
)
